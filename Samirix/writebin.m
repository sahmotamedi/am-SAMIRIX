function [] = writebin(filename, s)
% [] = writebin(filename, s)
% write a bin file defined by C++ class CVMatTreeStructBin
% Input  : filename   a bin file name
%        : s          a data structure contains strings, scalare, 2D matrics, cellarrays, structures

% this file is generated by CVMatTreeStructBin::writeMatlabWriteCode
	fileID = fopen(filename, 'w');
	if fileID == -1
		error(['cant open file ' filename]);
	end

	fwrite(fileID, 'CVMatBin', 'char');
	fwrite(fileID, 1, 'uint32');
	fwrite(fileID, [0,0,0,0], 'uint32');
	writeNode(fileID, s);
	fclose(fileID);
end


function [] = writeNode(fileID, node)
	if isstruct(node)
		fwrite(fileID, 1, 'uint32');
		writeDir(fileID, node);
	elseif isnumeric(node)
		fwrite(fileID, 3, 'uint32');
		writeMat(fileID, node);
	elseif islogical(node)
		fwrite(fileID, 3, 'uint32');
		writeMat(fileID, uint8(node));
	elseif iscell(node)
		fwrite(fileID, 2, 'uint32');
		writeList(fileID, node);
	elseif ischar(node)
		fwrite(fileID, 4, 'uint32');
		writeString(fileID, node);
	else
		fprintf('unhandled node type, ignored\n');
		fwrite(fileID, 0, 'uint32');
	end
end

function [] = writeDir(fileID, node)
	dirNames   = fieldnames(node);
	dirLength  = length(dirNames);
	fwrite(fileID, dirLength, 'uint32');
	for i=1:dirLength
		name        = dirNames{i};
		writeString(fileID, name);
		writeNode(fileID, node.(name));
	end
end

function [] = writeList(fileID, node)
	dirLength = length(node);
	fwrite(fileID, dirLength, 'uint32');
	for i=1:dirLength
		writeNode(fileID, node{i});
	end
end

function [] = writeString(fileID, str)
	stringLength  = length(str);
	fwrite(fileID, stringLength, 'uint32');
	fwrite(fileID, str, 'char');
end

function [] = writeMat(fileID, mat)
	if isa(mat, 'uint8')
		depth = 0';
	elseif isa(mat, 'uint16')
		depth = 2';
	elseif isa(mat, 'uint32')
		depth = -1';
	elseif isa(mat, 'int8')
		depth = 1';
	elseif isa(mat, 'int16')
		depth = 3';
	elseif isa(mat, 'int32')
		depth = 4';
	elseif isa(mat, 'single')
		depth = 5';
	elseif isa(mat, 'double')
		depth = 6';
	else
		fprintf('unhandled matrics format, convert to double\n');
		mat = double(mat);
		depth = 6';
	end

	[rows, cols, channels] = size(mat);
	fwrite(fileID, depth   , 'uint32');
	fwrite(fileID, channels, 'uint32');
	fwrite(fileID, rows    , 'uint32');
	fwrite(fileID, cols    , 'uint32');
	fwrite(fileID, [0,0,0,0], 'uint32');

	if(channels > 1)
		A = permute(mat, [2,1,3]);
		mat = reshape(A, [cols*rows channels]);
	end

	if isa(mat, 'uint8')
		fwrite(fileID, mat', 'uint8')';
	elseif isa(mat, 'uint16')
		fwrite(fileID, mat', 'uint16')';
	elseif isa(mat, 'uint32')
		fwrite(fileID, mat', 'uint32')';
	elseif isa(mat, 'int8')
		fwrite(fileID, mat', 'int8')';
	elseif isa(mat, 'int16')
		fwrite(fileID, mat', 'int16')';
	elseif isa(mat, 'int32')
		fwrite(fileID, mat', 'int32')';
	elseif isa(mat, 'single')
		fwrite(fileID, mat', 'single')';
	elseif isa(mat, 'double')
		fwrite(fileID, mat', 'double')';
	end

end
